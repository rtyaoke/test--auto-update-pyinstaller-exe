name: CI

on:
  push:
    branches: [main]

  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10.4"

      - name: Get Python version
        run: python -V

      - name: Setup Python packages
        run: |
          pip install invoke
          invoke setup

      # - name: Test
      #   run: invoke test

      - name: Build
        run: |
          invoke build

      # - name: Increment value
      #   uses: yoichiro/gh-action-increment-value@main
      #   with:
      #     target_directory: ''
      #     target_file: 'version.json'
      #     prefix: '{"buildNumber":'
      #     suffix: '}'

      # - name: Read certificate
      #   id: certificate
      #   uses: juliangruber/read-file-action@v1
      #   with:
      #     path: ./credentials/pfx-encoded-bytes.txt
      #     trim: true

      # - name: Read certhash
      #   id: certhash
      #   uses: juliangruber/read-file-action@v1
      #   with:
      #     path: ./credentials/certhash.txt
      #     trim: true

      # - name: Sign To exe
      #   uses: DanaBear/code-sign-action@master
      #   with:
      #     certificate: '${{ steps.certificate.outputs.content }}'
      #     password: 'roadfrontier'
      #     certificatesha1: '${{ steps.certhash.outputs.content }}'
      #     certificatename: 'roadfrontier'
      #     folder: 'dist'
      #     timestampUrl: 'http://timestamp.digicert.com'
      #     recursive: true

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test--auto-update-pyinstaller-exe.exe
          path: dist/test--auto-update-pyinstaller-exe.exe

      - name: create git tag
        id: create_git_tag
        run: |
          $TAG_NAME = "v_" + (Get-Date -format "yyyy-MM-dd_HH-mm")
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "::set-output name=tag_name::$TAG_NAME"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_git_tag.outputs.tag_name }}
          release_name: Release ${{ steps.create_git_tag.outputs.tag_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: dist/test--auto-update-pyinstaller-exe.exe
          asset_name: test--auto-update-pyinstaller-exe.exe
          asset_content_type: application/vnd.microsoft.portable-executable
